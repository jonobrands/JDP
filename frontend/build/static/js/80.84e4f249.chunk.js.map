{"version":3,"file":"static/js/80.84e4f249.chunk.js","mappings":"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","sources":["components/JoviePanel.js","store/exchangeStore.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useJovieStore } from '../store/jovieStore';\nimport { useExchangeStore } from '../store/exchangeStore';\nimport CopyCell from '../CopyCell';\nimport * as api from '../api';\nimport { normalizeName } from '../utils/normalizeName';\nimport { formatTime12hRange } from '../utils/formatting';\n\n/**\n * Standalone JOVIE Panel Component\n * Handles JOVIE input, parsing, UID registry mapping, and table display.\n * All logic and state are encapsulated. Plug-and-play in any React app.\n */\nfunction JoviePanel({ onStatusUpdate }) {\n  const jovieText = useJovieStore(state => state.jovieText);\n  const setJovieText = useJovieStore(state => state.setJovieText);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [showUIDs, setShowUIDs] = useState(false);\n  const jovieRows = useJovieStore(state => state.jovieRows);\n  const setJovieRows = useJovieStore(state => state.setJovieRows);\n  const [jovieDate, setJovieDate] = useState(null);\n  const exchange = useExchangeStore();\n\n  // Process JOVIE input and attach UIDs\n  const handleProcessJovie = async () => {\n    setLoading(true); setError('');\n    try {\n      const result = await api.processJovie(jovieText);\n      let sortedRows = (result.rows || []).sort((a, b) => (a.client || '').localeCompare(b.client || ''));\n      // Enrich with UIDs from backend (exact names, no aliasing)\n      let uidMaps = { clients: {}, caregivers: {} };\n      try {\n        uidMaps = await api.ensureUidsForRows(sortedRows);\n      } catch (e) {\n        console.warn('JOVIE UID ensure failed, proceeding without enrichment', e);\n      }\n      const rowsWithUIDs = sortedRows.map(r => ({\n        ...r,\n        clientUID: uidMaps.clients?.[String(r.client || '').trim()] || r.clientUID || '',\n        caregiverUID: uidMaps.caregivers?.[String(r.caregiver || '').trim()] || r.caregiverUID || ''\n      }));\n      // Update local state\n      setJovieRows(rowsWithUIDs);\n      setJovieDate(result.date || null);\n      \n      // Publish to exchange store\n      exchange.publish('jovie', { \n        rows: rowsWithUIDs,\n        date: result.date,\n        uidSynced: true,\n        timestamp: new Date().toISOString()\n      });\n      \n      console.log('Published JOVIE data to exchange store');\n      if (onStatusUpdate) {\n        const d = result.date || null;\n        onStatusUpdate({\n          message: `Processed ${rowsWithUIDs.length} JOVIE records`,\n          count: rowsWithUIDs.length,\n          date: d\n        });\n      }\n    } catch (e) {\n      console.error('Error processing JOVIE data:', e);\n      setError('Failed to process JOVIE data');\n      setJovieDate(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleClear = () => {\n    setJovieText('');\n    setJovieRows([]);\n    setJovieDate(null);\n    setError('');\n    if (onStatusUpdate) onStatusUpdate({ message: 'JOVIE cleared', count: 0, date: null });\n  };\n\n  // Placeholder for Export logic (can be further modularized)\n  const handleExport = () => {};\n\n\n  return (\n    <div>\n      <div className=\"bg-gray-50 border rounded p-4 mb-4\">\n        <label className=\"block font-semibold mb-2\">Paste JOVIE data here (In Blocks)</label>\n        <textarea\n          className=\"w-full h-24 border rounded p-2 mb-4\"\n          value={jovieText}\n          onChange={e => setJovieText(e.target.value)}\n        />\n      </div>\n      <div className=\"flex gap-4 mb-4 items-center\">\n        <button className=\"bg-orange-500 text-white px-6 py-2 rounded font-semibold hover:bg-orange-600\" onClick={handleProcessJovie} disabled={loading}>Process</button>\n        <button className=\"bg-gray-300 text-gray-800 px-6 py-2 rounded font-semibold hover:bg-gray-400\" onClick={handleClear}>Clear</button>\n        <label className=\"flex items-center gap-2 ml-2 text-sm\">\n          <input type=\"checkbox\" checked={showUIDs} onChange={e=>setShowUIDs(e.target.checked)} />\n          <span>Show UIDs</span>\n        </label>\n      </div>\n      {error && <div className=\"text-red-600 mb-2\">{error}</div>}\n      <div className=\"overflow-x-auto border rounded bg-white mb-4 max-h-[350px] overflow-y-auto\">\n        <table className=\"min-w-full text-sm\">\n          <thead className=\"bg-gray-200\">\n            <tr>\n              <th className=\"p-2 border font-bold\">#</th>\n              <th className=\"p-2 border font-bold\">Client</th>\n              <th className=\"p-2 border font-bold\">Caregiver</th>\n              <th className=\"p-2 border font-bold\">Time</th>\n            </tr>\n          </thead>\n          <tbody>\n            {[...jovieRows].sort((a, b) => (a.client || '').localeCompare(b.client || '')).map((row, idx) => (\n              <tr key={idx}>\n                <CopyCell>{idx + 1}</CopyCell>\n                <CopyCell>\n                  {row.client}\n                  {showUIDs && (\n                    <span className=\"text-gray-500 text-xs ml-2\">[{row.clientUID || row.client_uid || row.clientId || row.client_id || ''}]</span>\n                  )}\n                </CopyCell>\n                <CopyCell>\n                  {row.caregiver}\n                  {showUIDs && (\n                    <span className=\"text-gray-500 text-xs ml-2\">[{row.caregiverUID || row.caregiver_uid || row.caregiverId || row.caregiver_id || ''}]</span>\n                  )}\n                </CopyCell>\n                <CopyCell>{formatTime12hRange(row.timeRange || row.time)}</CopyCell>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default JoviePanel;\n","import { create } from 'zustand';\n\n/**\n * Exchange Store\n * Acts as a central hub for data exchange between modules\n * Each module can publish data to specific channels and subscribe to data from other modules\n */\n\nexport const useExchangeStore = create((set, get) => ({\n  // Data channels\n  channels: {\n    buca: null,      // BUCA data\n    jovie: null,     // JOVIE data\n    uids: null,      // UID mappings\n    storage: null    // Persistent storage\n  },\n  \n  // Publish data to a channel\n  publish: (channel, data) => {\n    set(state => ({\n      channels: {\n        ...state.channels,\n        [channel]: {\n          ...state.channels[channel],\n          ...data,\n          timestamp: new Date().toISOString()\n        }\n      }\n    }));\n  },\n  \n  // Subscribe to data from a channel\n  subscribe: (channel, selector = state => state) => {\n    return (callback) => {\n      const listener = (state) => {\n        const data = state.channels[channel];\n        if (data) {\n          callback(selector(data), data);\n        }\n      };\n      \n      // Return unsubscribe function\n      return useExchangeStore.subscribe(listener, selector);\n    };\n  },\n  \n  // Clear a channel\n  clearChannel: (channel) => {\n    set(state => ({\n      channels: {\n        ...state.channels,\n        [channel]: null\n      }\n    }));\n  },\n  \n  // Get current data from a channel\n  getChannelData: (channel) => {\n    return get().channels[channel];\n  }\n}));\n\n// Initialize the store\nif (typeof window !== 'undefined') {\n  window.exchangeStore = useExchangeStore;\n}\n"],"names":["_ref","onStatusUpdate","jovieText","useJovieStore","state","setJovieText","loading","setLoading","useState","error","setError","showUIDs","setShowUIDs","jovieRows","setJovieRows","jovieDate","setJovieDate","exchange","useExchangeStore","_jsxs","children","className","_jsx","value","onChange","e","target","onClick","async","result","api","sortedRows","rows","sort","a","b","client","localeCompare","uidMaps","clients","caregivers","console","warn","rowsWithUIDs","map","r","_uidMaps$clients","_uidMaps$caregivers","clientUID","String","trim","caregiverUID","caregiver","date","publish","uidSynced","timestamp","Date","toISOString","log","d","message","length","count","disabled","handleClear","type","checked","row","idx","CopyCell","client_uid","clientId","client_id","caregiver_uid","caregiverId","caregiver_id","formatTime12hRange","timeRange","time","create","set","get","channels","buca","jovie","uids","storage","channel","data","subscribe","selector","arguments","undefined","callback","clearChannel","getChannelData","window","exchangeStore"],"sourceRoot":""}