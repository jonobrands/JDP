{"version":3,"file":"static/js/302.e0bcb630.chunk.js","mappings":"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","sources":["components/ComparePanel.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\n\n\nexport default function ComparePanel({\n  onCompare, onClearResults, onExport, rows = []\n}) {\n  const [showUIDs, setShowUIDs] = useState(false);\n\n  const pick = (obj, keys) => {\n    for (const k of keys) {\n      if (obj && obj[k]) return obj[k];\n    }\n    return '';\n  };\n  const getClientUID = (row) => pick(row, ['clientUID','client_uid','clientId','client_id','clientUid']);\n  const getCaregiverUID = (row) => pick(row, ['caregiverUID','caregiver_uid','caregiverId','caregiver_id','caregiverUid']);\n\n  // Normalize strings for robust equality checks\n  const normalize = (s) => (s || '').toString().trim().replace(/\\s+/g, ' ').toLowerCase();\n  // Field alias lists for extracting BUCA/JOVIE caregivers on consolidated BOTH rows\n  const BUCA_CG_KEYS = [\n    'bucaCaregiver','BUCA_caregiver','buca_caregiver','bucaCG','buca_cg','bucaCaregiverName','bucaCaregiver1','caregiver_buca','BUCA_CG'\n  ];\n  const JOVIE_CG_KEYS = [\n    'jovieCaregiver','JOVIE_caregiver','jovie_caregiver','jovieCG','jovie_cg','jovieCaregiverName','jovieCaregiver1','caregiver_jovie','JOVIE_CG'\n  ];\n  // UID alias lists per portal on BOTH rows (MAST-based only)\n  const BUCA_CG_UID_KEYS = [\n    'bucaCaregiverUID','buca_caregiver_uid','BUCA_caregiver_uid','bucaCaregiverId','buca_caregiver_id','BUCA_CG_UID','caregiver_uid_buca','caregiverUidBuca'\n  ];\n  const JOVIE_CG_UID_KEYS = [\n    'jovieCaregiverUID','jovie_caregiver_uid','JOVIE_caregiver_uid','jovieCaregiverId','jovie_caregiver_id','JOVIE_CG_UID','caregiver_uid_jovie','caregiverUidJovie'\n  ];\n  const normUid = (u) => (u || '').toString().trim().toUpperCase();\n  const normalizeName = (s) => (s || '').toString().trim().replace(/\\s+/g, ' ').toUpperCase();\n  // Canonicalize names to reduce false mismatches on common nicknames when UIDs are missing\n  const firstNameAlias = {\n    'SAM': 'SAMANTHA',\n    'MIKE': 'MICHAEL',\n    'DAVE': 'DAVID',\n    'KATE': 'KATHERINE',\n    'KATIE': 'KATHERINE',\n    'LIZ': 'ELIZABETH',\n    'BETH': 'ELIZABETH',\n    'JEN': 'JENNIFER',\n    'JESS': 'JESSICA',\n    'ALEX': 'ALEXANDER',\n    'ABBY': 'ABIGAIL',\n    'TOM': 'THOMAS'\n  };\n  const canonicalizeFullName = (full) => {\n    const n = normalizeName(full);\n    if (!n) return n;\n    const parts = n.split(' ');\n    if (parts.length === 0) return n;\n    const first = parts[0];\n    const rest = parts.slice(1).join(' ');\n    const mappedFirst = firstNameAlias[first] || first;\n    return [mappedFirst, rest].filter(Boolean).join(' ').trim();\n  };\n  // Safer comparison: only alias first name when the remainder (last name and beyond) matches exactly\n  const namesEqualByFallback = (a, b) => {\n    const na = normalizeName(a);\n    const nb = normalizeName(b);\n    if (!na || !nb) return na === nb;\n    if (na === nb) return true;\n    const pa = na.split(' ');\n    const pb = nb.split(' ');\n    const firstA = pa[0] || '';\n    const firstB = pb[0] || '';\n    const restA = pa.slice(1).join(' ');\n    const restB = pb.slice(1).join(' ');\n    if (restA !== restB) return false;\n    const mapA = firstNameAlias[firstA] || firstA;\n    const mapB = firstNameAlias[firstB] || firstB;\n    return mapA === mapB;\n  };\n\n  // Session-only temporary UID assignment (tracking only, not displayed, not used for matching)\n  const sessionIdRef = useRef(() => {\n    // Lightweight session id: yyyymmdd + random 4 chars\n    const d = new Date();\n    const ymd = `${d.getFullYear()}${String(d.getMonth()+1).padStart(2,'0')}${String(d.getDate()).padStart(2,'0')}`;\n    return `${ymd}-${Math.random().toString(36).slice(2,6).toUpperCase()}`;\n  });\n  const sessionId = typeof sessionIdRef.current === 'function' ? (sessionIdRef.current = sessionIdRef.current()) : sessionIdRef.current;\n  const tempUidMapRef = useRef(new Map());\n  const stableKey = (side, client, caregiver) => `${side}|${normalizeName(client)}|${normalizeName(caregiver)}`;\n  const shortHash = (s) => {\n    let h = 0; for (let i=0;i<s.length;i++){ h = ((h<<5)-h) + s.charCodeAt(i); h |= 0; }\n    return Math.abs(h).toString(36).toUpperCase().slice(0,6);\n  };\n  const getTempUid = (side, client, caregiver) => {\n    const key = stableKey(side, client || '', caregiver || '');\n    if (!tempUidMapRef.current.has(key)) {\n      tempUidMapRef.current.set(key, `TMP-${sessionId}-${shortHash(key)}`);\n    }\n    return tempUidMapRef.current.get(key);\n  };\n\n  const uidReadyNotice = (() => {\n    // If rows carry meta, we can inspect first item for flags; otherwise, hide notice.\n    const meta = rows && rows._meta ? rows._meta : null;\n    if (!meta) return null;\n    if (meta.bucaUidSynced === false || meta.jovieUidSynced === false) {\n      return (\n        <div className=\"text-xs text-blue-700 bg-blue-50 border border-blue-200 rounded px-2 py-1 mb-2\">\n          Waiting for UID enrichment to complete...\n        </div>\n      );\n    }\n    return null;\n  })();\n\n  return (\n    <div>\n      {/* Legend and Controls */}\n      <div className=\"flex gap-6 mt-2 mb-4 text-sm items-center\">\n        <div className=\"flex items-center gap-2\"><span className=\"inline-block w-4 h-4 bg-green-100 border border-green-400 rounded\"></span> Exact Match</div>\n        <div className=\"flex items-center gap-2\"><span className=\"inline-block w-4 h-4 bg-orange-100 border border-orange-400 rounded\"></span> Verify Which CG</div>\n        <div className=\"flex items-center gap-2\"><span className=\"inline-block w-4 h-4 bg-red-100 border border-red-400 rounded\"></span> Complete Mismatch</div>\n      </div>\n      <div className=\"flex gap-4 mb-4 items-center\">\n        <button className=\"bg-orange-500 text-white px-6 py-2 rounded font-semibold hover:bg-orange-600\" onClick={onCompare}>Compare BUCA & JOVIE</button>\n        <button className=\"bg-gray-300 text-gray-800 px-6 py-2 rounded font-semibold hover:bg-gray-400\" onClick={onClearResults}>Clear Results</button>\n        <label className=\"flex items-center gap-2 ml-2 text-sm\">\n          <input type=\"checkbox\" checked={showUIDs} onChange={e=>setShowUIDs(e.target.checked)} />\n          <span>Show UIDs</span>\n        </label>\n      </div>\n      {uidReadyNotice}\n      <div className=\"overflow-x-auto border rounded bg-white mb-2 output-scroll\">\n        <table className=\"min-w-full text-sm\">\n          <thead className=\"bg-gray-200\">\n            <tr>\n              <th className=\"p-2 font-bold\">#</th>\n              <th className=\"p-2 font-bold\">Source</th>\n              <th className=\"p-2 font-bold\">Client</th>\n              <th className=\"p-2 font-bold\">Caregiver</th>\n              <th className=\"p-2 font-bold\">Match Type</th>\n            </tr>\n          </thead>\n          <tbody>\n            {rows.map((row, idx) => {\n              // Extract BUCA/JOVIE caregivers for BOTH rows (names for display only)\n              let bucaCG = '';\n              let jovieCG = '';\n              // Extract BUCA/JOVIE caregiver UIDs for MAST-based comparison\n              let bucaCGUID = '';\n              let jovieCGUID = '';\n              if (row && row.source === 'BOTH') {\n                bucaCG = pick(row, BUCA_CG_KEYS) || '';\n                jovieCG = pick(row, JOVIE_CG_KEYS) || '';\n                bucaCGUID = pick(row, BUCA_CG_UID_KEYS) || '';\n                jovieCGUID = pick(row, JOVIE_CG_UID_KEYS) || '';\n                // Fallbacks if not explicitly provided\n                if (!bucaCG && (row.tag === 'verify_cg' || row.match_type === 'Verify Which CG')) bucaCG = row.caregiver || '';\n                // Assign session-only temp UIDs for tracking when missing (do not use these for equality checks)\n                if (!bucaCGUID) {\n                  // Assign but keep real comparison based on real UIDs only\n                  getTempUid('BUCA', row.client, bucaCG || row.caregiver || '');\n                }\n                if (!jovieCGUID) {\n                  getTempUid('JOVIE', row.client, jovieCG || '');\n                }\n              }\n\n              // MAST UID values\n              const uidA = normUid(bucaCGUID);\n              const uidB = normUid(jovieCGUID);\n              const bothRow = row && row.source === 'BOTH';\n              const uidBothPresent = bothRow && !!uidA && !!uidB;\n              const uidEqual = uidBothPresent && uidA === uidB;\n              // Fallback name-based comparison when UIDs not available on at least one side\n              const nameMismatch = bothRow && bucaCG && jovieCG && !namesEqualByFallback(bucaCG, jovieCG);\n              // Hybrid rule:\n              // - If both UIDs present: mismatch when different\n              // - If either UID missing: use name comparison to decide mismatch\n              const portalMismatch = bothRow && ( (uidBothPresent && !uidEqual) || (!uidBothPresent && nameMismatch) );\n\n              // Row background: red (backend complete mismatch) > orange (hybrid caregiver mismatch) > green (UID-equal or backend exact)\n              let bg = '';\n              if (row.tag === 'complete_mismatch' || row.match_type === 'Complete Mismatch') bg = 'bg-red-100';\n              else if (portalMismatch) bg = 'bg-orange-100';\n              else if (uidEqual || row.tag === 'exact_match' || row.match_type === 'Exact Match') bg = 'bg-green-100';\n\n              return (\n                <tr key={idx} className={bg + ' border-b'}>\n                  <td className=\"p-2\">{idx + 1}</td>\n                  <td className=\"p-2\">{row.source}</td>\n                  <td className=\"p-2\">\n                    {row.client}\n                    {showUIDs && (\n                      <span className=\"text-gray-500 text-xs ml-2\">\n                        [{getClientUID(row) || 'MAST NF'}]\n                      </span>\n                    )}\n                  </td>\n                  <td className=\"p-2\">\n                    {/* Caregiver cell: show JOVIE caregiver when hybrid mismatch; otherwise fallback to row.caregiver */}\n                    {portalMismatch && jovieCG ? (\n                      <span>{jovieCG}</span>\n                    ) : (\n                      <span>{row.caregiver}</span>\n                    )}\n                    {showUIDs && (\n                      <span className=\"text-gray-500 text-xs ml-2\">\n                        [{getCaregiverUID(row) || 'MAST NF'}]\n                      </span>\n                    )}\n                  </td>\n                  <td className=\"p-2\">\n                    {/* Align label with hybrid result: mismatch (with BUCA hint) when UIDs differ or, if UIDs missing, names differ; exact when both UIDs equal; else original label. */}\n                    {portalMismatch ? (\n                      <span>\n                        <span className=\"font-semibold\">Caregiver Mismatch</span>\n                        {bucaCG ? (\n                          <span className=\"ml-2 text-gray-800\">BUCA -&gt; {bucaCG}</span>\n                        ) : null}\n                      </span>\n                    ) : uidEqual ? (\n                      <span className=\"font-semibold\">Exact Match</span>\n                    ) : (\n                      row.match_type\n                    )}\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n      {/* Note: Temporary mismatch modal removed for rebuild. */}\n    </div>\n  );\n}"],"names":["ComparePanel","_ref","onCompare","onClearResults","onExport","rows","showUIDs","setShowUIDs","useState","pick","obj","keys","k","getClientUID","row","getCaregiverUID","BUCA_CG_KEYS","JOVIE_CG_KEYS","BUCA_CG_UID_KEYS","JOVIE_CG_UID_KEYS","normUid","u","toString","trim","toUpperCase","normalizeName","s","replace","firstNameAlias","sessionIdRef","useRef","d","Date","getFullYear","String","getMonth","padStart","getDate","Math","random","slice","sessionId","current","tempUidMapRef","Map","getTempUid","side","client","caregiver","key","stableKey","has","set","h","i","length","charCodeAt","abs","shortHash","get","uidReadyNotice","meta","_meta","bucaUidSynced","jovieUidSynced","_jsx","className","children","_jsxs","onClick","type","checked","onChange","e","target","map","idx","bucaCG","jovieCG","bucaCGUID","jovieCGUID","source","tag","match_type","uidA","uidB","bothRow","uidBothPresent","uidEqual","nameMismatch","namesEqualByFallback","a","b","na","nb","pa","split","pb","firstA","firstB","join","portalMismatch","bg"],"sourceRoot":""}