{"version":3,"file":"static/js/424.899386f8.chunk.js","mappings":"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","sources":["components/BucaPanel.js","store/exchangeStore.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useBucaStore } from '../store/bucaStore';\nimport { useExchangeStore } from '../store/exchangeStore';\nimport CopyCell from '../CopyCell';\nimport * as api from '../api';\nimport { normalizeName } from '../utils/normalizeName';\nimport { getMultipleCaregiverRows, resolveMultipleCaregiverRow } from '../utils/multipleCaregiver';\n\n/**\n * Standalone BUCA Panel Component\n * Handles BUCA input, parsing, UID registry mapping, and table display.\n * All logic and state are encapsulated. Plug-and-play in any React app.\n */\nfunction BucaPanel({ onStatusUpdate }) {\n  // Get all necessary state and actions from the store\n  const {\n    bucaText,\n    bucaRows,\n    setBucaText,\n    setBucaRows,\n    clearBucaRows,\n    updateBucaRow,\n    lastUpdated\n  } = useBucaStore();\n  \n  // Local UI state\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [showUIDs, setShowUIDs] = useState(false);\n  \n  // Multi-CG Modal State\n  const [multiCGRows, setMultiCGRows] = useState([]);\n  const [showMultiCGModal, setShowMultiCGModal] = useState(false);\n  const [selectedMultiCGRow, setSelectedMultiCGRow] = useState(null);\n  \n  // Load saved state on mount\n  useEffect(() => {\n    if (bucaRows?.length > 0 && onStatusUpdate) {\n      onStatusUpdate(`Loaded ${bucaRows.length} BUCA records`);\n    }\n  }, [bucaRows, onStatusUpdate]);\n\n  // Get exchange store\n  const exchange = useExchangeStore();\n  \n  // Process BUCA input and attach UIDs\n  const handleProcessBuca = async () => {\n    if (!bucaText.trim()) {\n      setError('Please enter BUCA data');\n      return;\n    }\n    \n    setLoading(true);\n    setError('');\n    \n    try {\n      // Process the BUCA text\n      const result = await api.processBuca(bucaText);\n      if (!result?.rows?.length) {\n        throw new Error('No valid data found in BUCA input');\n      }\n      \n      const sortedRows = [...result.rows].sort((a, b) => (a.client || '').localeCompare(b.client || ''));\n\n      // Enrich with UIDs from backend (exact names, no aliasing)\n      let uidMaps = { clients: {}, caregivers: {} };\n      try {\n        uidMaps = await api.ensureUidsForRows(sortedRows);\n      } catch (e) {\n        console.warn('BUCA UID ensure failed, proceeding without enrichment', e);\n      }\n      const rowsWithUIDs = sortedRows.map(r => ({\n        ...r,\n        clientUID: uidMaps.clients?.[String(r.client || '').trim()] || r.clientUID || '',\n        caregiverUID: (() => {\n          const primary = Array.isArray(r.caregivers) && r.caregivers.length > 0 ? r.caregivers[0] : (r.caregiver || '');\n          return uidMaps.caregivers?.[String(primary).trim()] || r.caregiverUID || '';\n        })()\n      }));\n      \n      // Update local state\n      setBucaRows(rowsWithUIDs);\n      \n      console.log('Publishing to exchange store:', { \n        rows: rowsWithUIDs,\n        timestamp: new Date().toISOString()\n      });\n      \n      // Publish to exchange store\n      exchange.publish('buca', { \n        rows: rowsWithUIDs,\n        uidSynced: true,\n        timestamp: new Date().toISOString()\n      });\n      \n      if (onStatusUpdate) {\n        onStatusUpdate(`Processed ${rowsWithUIDs.length} BUCA records`);\n      }\n      \n      // Note: avoid duplicate re-publish; we already published enriched rows above.\n      \n    } catch (error) {\n      console.error('Error processing BUCA data:', error);\n      setError(error.message || 'Failed to process BUCA data');\n      \n      if (onStatusUpdate) {\n        onStatusUpdate('Error processing BUCA data');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const clearBuca = () => {\n    // Clear everything in the store\n    clearBucaRows();\n    // Clear local state\n    setError('');\n    setMultiCGRows([]);\n    setShowMultiCGModal(false);\n    setSelectedMultiCGRow(null);\n    \n    if (onStatusUpdate) onStatusUpdate('BUCA data cleared');\n  };\n\n  // Identify CG logic – find rows with multiple caregivers and open modal\n  const handleIdentify = () => {\n    const flaggedRows = getMultipleCaregiverRows(bucaRows);\n\n    if (!Array.isArray(flaggedRows) || flaggedRows.length === 0) {\n      setError('No rows with multiple caregivers found.');\n      setShowMultiCGModal(false);\n      setSelectedMultiCGRow(null);\n      setMultiCGRows([]);\n      return;\n    }\n\n    const flaggedRowsWithIndex = flaggedRows\n      .map(row => {\n        const rowIndex = bucaRows.findIndex(r => r.client === row.client && r.caseNumber === row.caseNumber);\n        return { ...row, rowIndex };\n      })\n      .filter(r => r.rowIndex !== -1);\n\n    if (flaggedRowsWithIndex.length === 0) {\n      setError('Could not locate rows in the current data.');\n      setShowMultiCGModal(false);\n      setSelectedMultiCGRow(null);\n      setMultiCGRows([]);\n      return;\n    }\n\n    setMultiCGRows(flaggedRowsWithIndex);\n    setSelectedMultiCGRow(flaggedRowsWithIndex[0]);\n    setShowMultiCGModal(true);\n    setError('');\n  };\n\n  const handleResolveMultiCG = (rowIndex, selectedCaregiver) => {\n    // 1. Update the row in bucaRows\n    const updatedRows = bucaRows.map((row, idx) => {\n      if (idx === rowIndex) {\n        return {\n          ...row,\n          caregiver: selectedCaregiver,\n          caregivers: [selectedCaregiver] // Ensure single caregiver in array\n        };\n      }\n      return row;\n    });\n  \n    // 2. Update the raw text (only if bucaText exists)\n    let updatedText = bucaText;\n    if (typeof bucaText === 'string' && bucaText.length > 0) {\n      const separator = bucaText.includes('\\r\\n') ? '\\r\\n' : '\\n';\n      const lines = bucaText.split(/\\r?\\n/);\n      const cgRegex = /(ESTCaregiver:\\s*)([^\\n\\r]*)/i;\n      const targetCase = updatedRows[rowIndex] && updatedRows[rowIndex].caseNumber;\n\n      let lineIdx = -1;\n      if (targetCase) {\n        lineIdx = lines.findIndex(l => l.includes(targetCase));\n      }\n\n      if (lineIdx !== -1) {\n        lines[lineIdx] = lines[lineIdx].replace(cgRegex, `$1${selectedCaregiver}`);\n        updatedText = lines.join(separator);\n      } else if (lines[rowIndex] != null) {\n        // Fallback to index-based replacement\n        lines[rowIndex] = lines[rowIndex].replace(cgRegex, `$1${selectedCaregiver}`);\n        updatedText = lines.join(separator);\n      }\n    }\n  \n    // 3. Update all states\n    setBucaRows(updatedRows);\n    useBucaStore.getState().setBucaRows(updatedRows);\n    if (typeof updatedText === 'string') {\n      setBucaText(updatedText);\n      useBucaStore.getState().setBucaText(updatedText);\n    }\n    // 3b. Publish to exchange so other modules (e.g., UID Registry) get fresh data\n    try {\n      exchange.publish('buca', {\n        rows: updatedRows,\n        updatedAt: new Date().toISOString(),\n      });\n    } catch (e) {\n      console.warn('Exchange publish failed:', e);\n    }\n  \n    // 4. Find the next row with multiple caregivers from our tracked multiCGRows\n    const currentRowInMultiCGRows = multiCGRows.findIndex(row => row.rowIndex === rowIndex);\n    const nextMultiCGIndex = currentRowInMultiCGRows + 1;\n    \n    if (nextMultiCGIndex < multiCGRows.length) {\n      // Move to next row in our tracked multiCGRows\n      const nextRow = multiCGRows[nextMultiCGIndex];\n      setSelectedMultiCGRow({\n        ...nextRow,\n        rowIndex: nextRow.rowIndex\n      });\n    } else {\n      // No more rows, close modal\n      setShowMultiCGModal(false);\n      setSelectedMultiCGRow(null);\n      setMultiCGRows([]); // Reset the multiCGRows when done\n    }\n  };\n\n  const handleResolveMultiCG_OLD = (rowIndex, selectedCaregiver) => {\n    // 1. Update the row in bucaRows\n    const updatedRows = bucaRows.map((row, idx) => {\n      if (idx === rowIndex) {\n        return {\n          ...row,\n          caregiver: selectedCaregiver,\n          caregivers: [selectedCaregiver] // Ensure single caregiver in array\n        };\n      }\n      return row;\n    });\n  \n    // 2. Update the raw text\n    const updatedText = bucaText.split('\\n').map((line, idx) => {\n      if (idx === rowIndex) {\n        return line.replace(/(ESTCaregiver:\\s*)([^\\n]*)/i, `$1${selectedCaregiver}`);\n      }\n      return line;\n    }).join('\\n');\n  \n    // 3. Update all states\n    setBucaRows(updatedRows);\n    setBucaText(updatedText);\n    useBucaStore.getState().setBucaRows(updatedRows);\n    useBucaStore.getState().setBucaText(updatedText);\n  \n    // 4. Find the next row with multiple caregivers\n    const nextRow = updatedRows.findIndex((row, idx) => \n      Array.isArray(row.caregivers) && \n      row.caregivers.length > 1\n    );\n  \n    if (nextRow !== -1) {\n      // Move to next row with multiple caregivers\n      setSelectedMultiCGRow({\n        ...updatedRows[nextRow],\n        rowIndex: nextRow\n      });\n    } else {\n      // No more rows, close modal\n      setShowMultiCGModal(false);\n      setSelectedMultiCGRow(null);\n    }\n  };\n\n  const handleExport = () => {};\n\n  return (\n    <div>\n      <div className=\"bg-gray-50 border rounded p-4 mb-4\">\n        <label className=\"block font-semibold mb-2\">Paste BUCA data here (One entry per line)</label>\n        <textarea\n          className=\"w-full h-64 p-2 border rounded font-mono text-sm\"\n          placeholder=\"Paste BUCA data here...\"\n          value={bucaText}\n          onChange={(e) => {\n            const newText = e.target.value;\n            // Update both local state and store\n            setBucaText(newText);\n            useBucaStore.getState().setBucaText(newText);\n          }}\n          disabled={loading}\n        />\n      </div>\n      <div className=\"flex gap-4 mb-4 items-center\">\n        <button className=\"bg-orange-500 text-white px-6 py-2 rounded font-semibold hover:bg-orange-600\" onClick={handleProcessBuca} disabled={loading}>Process</button>\n        <button className=\"bg-gray-300 text-gray-800 px-6 py-2 rounded font-semibold hover:bg-gray-400\" onClick={clearBuca}>Clear</button>\n        <button className=\"bg-orange-400 text-white px-6 py-2 rounded font-semibold hover:bg-orange-500\" onClick={handleIdentify} disabled={getMultipleCaregiverRows(bucaRows).length === 0}>IDENTIFY CG</button>\n        <label className=\"flex items-center gap-2 ml-2 text-sm\">\n          <input type=\"checkbox\" checked={showUIDs} onChange={e=>setShowUIDs(e.target.checked)} />\n          <span>Show UIDs</span>\n        </label>\n      </div>\n      {error && <div className=\"text-red-600 mb-2\">{error}</div>}\n      <div className=\"overflow-x-auto border rounded bg-white mb-4 max-h-[350px] overflow-y-auto\">\n        <table className=\"min-w-full text-sm\">\n          <thead className=\"bg-gray-200\">\n            <tr>\n              <th className=\"p-2 border font-bold\">#</th>\n              <th className=\"p-2 border font-bold\">Client</th>\n              <th className=\"p-2 border font-bold\">Caregiver</th>\n              <th className=\"p-2 border font-bold\">Case Number</th>\n            </tr>\n          </thead>\n          <tbody>\n            {[...bucaRows].sort((a, b) => (a.client || '').localeCompare(b.client || '')).map((row, idx) => (\n              <tr key={idx}>\n                <CopyCell>{idx + 1}</CopyCell>\n                <CopyCell>\n                  {row.client}\n                  {showUIDs && (\n                    <span className=\"text-gray-500 text-xs ml-2\">[{row.clientUID || row.client_uid || row.clientId || row.client_id || ''}]</span>\n                  )}\n                </CopyCell>\n                <CopyCell>\n                  {Array.isArray(row.caregivers) ? row.caregivers.join(', ') : (row.caregiver || '')}\n                  {showUIDs && (\n                    <span className=\"text-gray-500 text-xs ml-2\">[{row.caregiverUID || row.caregiver_uid || row.caregiverId || row.caregiver_id || ''}]</span>\n                  )}\n                </CopyCell>\n                <CopyCell>{\n                  typeof row.caseNumber === 'string'\n                    ? row.caseNumber.replace(/\\s*Date:.*$/i, '').trim()\n                    : row.caseNumber\n                }</CopyCell>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n      {/* Multi-Caregiver Modal (BUCA only) */}\n      {showMultiCGModal && selectedMultiCGRow && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg shadow-lg p-6 min-w-[340px] max-w-[90vw]\">\n            <h2 className=\"text-lg font-bold mb-2\">Resolve Multiple Caregivers</h2>\n            <div className=\"mb-2\">\n              <div><span className=\"font-semibold\">Client:</span> {selectedMultiCGRow.client}</div>\n              <div><span className=\"font-semibold\">Case #:</span> {selectedMultiCGRow.caseNumber}</div>\n              <div><span className=\"font-semibold\">Date:</span> {selectedMultiCGRow.date}</div>\n            </div>\n            <div className=\"mb-4\">\n              <div className=\"font-semibold mb-1\">Select the correct caregiver:</div>\n              <div className=\"flex flex-col gap-2\">\n                {(Array.isArray(selectedMultiCGRow.caregivers) \n                  ? selectedMultiCGRow.caregivers \n                  : typeof selectedMultiCGRow.caregiver === 'string' \n                    ? selectedMultiCGRow.caregiver.split(',').map(cg => cg.trim()).filter(Boolean)\n                    : []\n                ).map((cg, idx) => (\n                  <button\n                    key={idx}\n                    className=\"bg-blue-500 hover:bg-blue-600 text-white rounded px-4 py-2 text-left\"\n                    onClick={() => {\n                      console.log('Selected caregiver:', cg, 'for row index:', selectedMultiCGRow.rowIndex);\n                      handleResolveMultiCG(selectedMultiCGRow.rowIndex, cg);\n                    }}\n                  >\n                    {cg}\n                  </button>\n                ))}\n              </div>\n            </div>\n            <div className=\"flex justify-end gap-2\">\n              <button\n                className=\"bg-gray-300 hover:bg-gray-400 text-gray-800 rounded px-4 py-2\"\n                onClick={() => {\n                  setShowMultiCGModal(false);\n                  setSelectedMultiCGRow(null);\n                }}\n              >Cancel</button>\n              <button\n                className=\"bg-orange-400 hover:bg-orange-500 text-white rounded px-4 py-2\"\n                onClick={() => {\n                  // Auto-select first caregiver if user skips\n                  if (selectedMultiCGRow.caregivers && selectedMultiCGRow.caregivers.length > 0) {\n                    handleResolveMultiCG(selectedMultiCGRow.rowIndex, selectedMultiCGRow.caregivers[0]);\n                  } else {\n                    setShowMultiCGModal(false);\n                    setSelectedMultiCGRow(null);\n                  }\n                }}\n              >Skip</button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default BucaPanel;\n","import { create } from 'zustand';\n\n/**\n * Exchange Store\n * Acts as a central hub for data exchange between modules\n * Each module can publish data to specific channels and subscribe to data from other modules\n */\n\nexport const useExchangeStore = create((set, get) => ({\n  // Data channels\n  channels: {\n    buca: null,      // BUCA data\n    jovie: null,     // JOVIE data\n    uids: null,      // UID mappings\n    storage: null    // Persistent storage\n  },\n  \n  // Publish data to a channel\n  publish: (channel, data) => {\n    set(state => ({\n      channels: {\n        ...state.channels,\n        [channel]: {\n          ...state.channels[channel],\n          ...data,\n          timestamp: new Date().toISOString()\n        }\n      }\n    }));\n  },\n  \n  // Subscribe to data from a channel\n  subscribe: (channel, selector = state => state) => {\n    return (callback) => {\n      const listener = (state) => {\n        const data = state.channels[channel];\n        if (data) {\n          callback(selector(data), data);\n        }\n      };\n      \n      // Return unsubscribe function\n      return useExchangeStore.subscribe(listener, selector);\n    };\n  },\n  \n  // Clear a channel\n  clearChannel: (channel) => {\n    set(state => ({\n      channels: {\n        ...state.channels,\n        [channel]: null\n      }\n    }));\n  },\n  \n  // Get current data from a channel\n  getChannelData: (channel) => {\n    return get().channels[channel];\n  }\n}));\n\n// Initialize the store\nif (typeof window !== 'undefined') {\n  window.exchangeStore = useExchangeStore;\n}\n"],"names":["_ref","onStatusUpdate","bucaText","bucaRows","setBucaText","setBucaRows","clearBucaRows","updateBucaRow","lastUpdated","useBucaStore","loading","setLoading","useState","error","setError","showUIDs","setShowUIDs","multiCGRows","setMultiCGRows","showMultiCGModal","setShowMultiCGModal","selectedMultiCGRow","setSelectedMultiCGRow","useEffect","length","exchange","useExchangeStore","handleResolveMultiCG","rowIndex","selectedCaregiver","updatedRows","map","row","idx","caregiver","caregivers","updatedText","separator","includes","lines","split","cgRegex","targetCase","caseNumber","lineIdx","findIndex","l","replace","join","getState","publish","rows","updatedAt","Date","toISOString","e","console","warn","nextMultiCGIndex","nextRow","_jsxs","children","className","_jsx","placeholder","value","onChange","newText","target","disabled","onClick","async","trim","_result$rows","result","api","Error","sortedRows","sort","a","b","client","localeCompare","uidMaps","clients","rowsWithUIDs","r","_uidMaps$clients","clientUID","String","caregiverUID","_uidMaps$caregivers","primary","Array","isArray","log","timestamp","uidSynced","message","clearBuca","handleIdentify","flaggedRows","getMultipleCaregiverRows","flaggedRowsWithIndex","filter","type","checked","CopyCell","client_uid","clientId","client_id","caregiver_uid","caregiverId","caregiver_id","date","cg","Boolean","create","set","get","channels","buca","jovie","uids","storage","channel","data","state","subscribe","selector","arguments","undefined","callback","clearChannel","getChannelData","window","exchangeStore"],"sourceRoot":""}