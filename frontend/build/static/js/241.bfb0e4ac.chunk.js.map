{"version":3,"file":"static/js/241.bfb0e4ac.chunk.js","mappings":"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","sources":["utils/uidRegistrySync.js","components/NameIDRegistryPanel.js","store/exchangeStore.js"],"sourcesContent":["// UID Registry Sync Utility\n// Handles online/offline fallback for UID assignments\n\nconst API_URL = process.env.REACT_APP_UID_API_URL || 'http://localhost:5000/uids';\nconst LOCAL_KEY = 'nameIdMap';\nconst QUEUE_KEY = 'nameIdMapQueue';\n\n// Check if backend is reachable\nexport async function isBackendAvailable() {\n  try {\n    const res = await fetch(API_URL, { method: 'GET', headers: { 'Accept': 'application/json' } });\n    if (!res.ok) throw new Error('Not OK');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n// Fetch all UID mappings (tries backend, falls back to localStorage)\nexport async function fetchNameIdMap() {\n  if (await isBackendAvailable()) {\n    const res = await fetch(API_URL);\n    if (!res.ok) throw new Error('Failed to fetch from backend');\n    const data = await res.json();\n    // Save to localStorage as backup\n    window.localStorage.setItem(LOCAL_KEY, JSON.stringify(data));\n    return data;\n  } else {\n    // Fallback\n    const local = window.localStorage.getItem(LOCAL_KEY);\n    return local ? JSON.parse(local) : {};\n  }\n}\n\n// Save or update UID mapping (tries backend, falls back to localStorage+queue)\nexport async function saveNameIdMap(nameIdMap) {\n  if (await isBackendAvailable()) {\n    // Try to sync any queued changes first\n    await syncQueuedChanges();\n    // Save current map\n    await fetch(API_URL, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(nameIdMap)\n    });\n    window.localStorage.setItem(LOCAL_KEY, JSON.stringify(nameIdMap));\n    return true;\n  } else {\n    // Save locally and queue for sync\n    window.localStorage.setItem(LOCAL_KEY, JSON.stringify(nameIdMap));\n    queueChange(nameIdMap);\n    return false;\n  }\n}\n\n// Queue unsynced changes\nfunction queueChange(map) {\n  let queue = JSON.parse(window.localStorage.getItem(QUEUE_KEY) || '[]');\n  queue.push(map);\n  window.localStorage.setItem(QUEUE_KEY, JSON.stringify(queue));\n}\n\n// Sync any queued changes to backend\nexport async function syncQueuedChanges() {\n  let queue = JSON.parse(window.localStorage.getItem(QUEUE_KEY) || '[]');\n  if (queue.length === 0) return;\n  for (const map of queue) {\n    await fetch(API_URL, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(map)\n    });\n  }\n  window.localStorage.removeItem(QUEUE_KEY);\n}\n\n// Utility: listen for online event and try to sync\nexport function setupOnlineSync() {\n  window.addEventListener('online', () => {\n    syncQueuedChanges();\n  });\n}\n\n// Purge the registry entirely (local and backend if available)\nexport async function purgeNameIdMap() {\n  const empty = {};\n  const backend = await isBackendAvailable();\n  try {\n    if (backend) {\n      await fetch(API_URL, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(empty)\n      });\n    }\n  } catch (e) {\n    // If backend purge fails, still clear local below\n  }\n  try {\n    window.localStorage.removeItem(LOCAL_KEY);\n    window.localStorage.removeItem(QUEUE_KEY);\n  } catch {}\n  return true;\n}\n","// NameIDRegistryPanel.js\n// Purpose: Assign and manage permanent unique IDs for names across BUCA and JOVIE datasets.\n// Pluggable, robust, and UI/logic as per user requirements.\n\nimport React, { useState, useEffect } from 'react';\nimport { useExchangeStore } from '../store/exchangeStore';\nimport { saveNameIdMap, fetchNameIdMap } from \"../utils/uidRegistrySync\";\nimport { purgeNameIdMap } from \"../utils/uidRegistrySync\";\nimport { isBackendAvailable } from \"../utils/uidRegistrySync\";\n// Ensure persistence utility is available globally for panel actions\nif (typeof window !== \"undefined\") window.saveNameIdMap = saveNameIdMap;\n\n// Helper: Normalize name for matching (case/space insensitive)\nfunction normalizeName(name) {\n  return (name || \"\").trim().replace(/\\s+/g, \" \").toLowerCase();\n}\n\n// Helper: Generate next UID string\nfunction getNextUID(existingIDs, source = \"MAST\") {\n  let max = 0;\n  existingIDs.forEach(id => {\n    const match = id.match(/UID-(\\d+)-/);\n    if (match) max = Math.max(max, parseInt(match[1], 10));\n  });\n  const nextNum = String(max + 1).padStart(4, \"0\");\n  return `UID-${nextNum}-${source}`;\n}\n\nexport default function NameIDRegistryPanel({\n  bucaNames = [],\n  jovieNames = [],\n  bucaCaregivers = [],\n  jovieCaregivers = [],\n  initialNameMap = {},\n  onNameMapChange,\n  showIDs = true,\n  allowAdmin = true,\n}) {\n  \n  // --- All state hooks must be defined before any return ---\n  const [nameMap, setNameMap] = useState(initialNameMap); // { type:normalizedName: UID }\n  const [entityType, setEntityType] = useState('client'); // 'client' or 'caregiver'\n  const exchange = useExchangeStore();\n  // Subscribe to channels for reactive live data lists\n  const channels = useExchangeStore(state => state.channels);\n\n  // Only initialize nameMap from initialNameMap on mount\n  useEffect(() => {\n    let mounted = true;\n    (async () => {\n      try {\n        // Auto-load from backend/localStorage; fall back to initialNameMap\n        const loaded = await fetchNameIdMap().catch(() => initialNameMap || {});\n        if (!mounted) return;\n        setNameMap(loaded);\n        onNameMapChange && onNameMapChange(loaded);\n        // Persist locally and publish to exchange\n        try { window.saveNameIdMap && window.saveNameIdMap(loaded); } catch {}\n        try { exchange.publish('uids', { map: loaded, loadedAt: new Date().toISOString() }); } catch {}\n        setMapLoaded(true);\n      } catch {\n        // Fallback to initial map if everything else fails\n        if (!mounted) return;\n        setNameMap(initialNameMap || {});\n        setMapLoaded(true);\n      }\n    })();\n    return () => { mounted = false; };\n  }, []);\n\n  const [oldName, setOldName] = useState(\"\");\n  const [preferredName, setPreferredName] = useState(\"\");\n  const [assignedList, setAssignedList] = useState([]); // [{names: [..], uid, sources: Set}]\n  const [searchAssigned, setSearchAssigned] = useState(\"\");\n  const [searchBuca, setSearchBuca] = useState(\"\");\n  const [searchJovie, setSearchJovie] = useState(\"\");\n  const [saveMsg, setSaveMsg] = useState(\"\");\n  const [mapLoaded, setMapLoaded] = useState(false);\n  const [backendOnline, setBackendOnline] = useState(null); // null = unknown, true/false after check\n\n  // Publish name map updates to exchange 'uids' channel\n  useEffect(() => {\n    try {\n      exchange.publish('uids', { map: nameMap, updatedAt: new Date().toISOString() });\n    } catch (e) {\n      // no-op\n    }\n  }, [nameMap]);\n\n  // Backend availability monitor (lightweight poll)\n  useEffect(() => {\n    let cancelled = false;\n    async function check() {\n      try {\n        const ok = await isBackendAvailable();\n        if (!cancelled) setBackendOnline(ok);\n      } catch {\n        if (!cancelled) setBackendOnline(false);\n      }\n    }\n    check();\n    const id = setInterval(check, 15000); // check every 15s\n    return () => { cancelled = true; clearInterval(id); };\n  }, []);\n\n  // Key helpers for registry\n  const registryKey = (name) => `${entityType}:${normalizeName(name)}`;\n  const filterType = (k) => k.startsWith(entityType+':');\n\n  // Alias support: generate common variants so future live data resolves to the same UID\n  const generateAliases = (raw) => {\n    const s = String(raw || '').trim();\n    if (!s) return [];\n    const base = normalizeName(s);\n    const aliases = new Set([base]);\n    // Variants: remove hyphens, dots, apostrophes\n    const dePunct = base.replace(/[\\-\\.']/g, ' ');\n    aliases.add(dePunct);\n    aliases.add(dePunct.replace(/\\s+/g, ''));\n    // Collapsed spaces\n    aliases.add(base.replace(/\\s+/g, ' '));\n    // Handle quoted nicknames: e.g., Brittany \"Tazz\" Bentley\n    const m = base.match(/\"([^\"]+)\"/);\n    if (m) {\n      const nickname = m[1].toLowerCase().trim();\n      let unquoted = base.replace(/\"[^\"]+\"/g, '').replace(/\\s+/g, ' ').trim();\n      if (unquoted) aliases.add(unquoted);\n      const parts = unquoted.split(/\\s+/).filter(Boolean);\n      const lastName = parts[parts.length - 1];\n      if (lastName) aliases.add(`${nickname} ${lastName}`.trim());\n      aliases.add(nickname);\n    }\n    // Truncated variant: drop last token for multi-word names\n    const tokens = base.split(/\\s+/).filter(Boolean);\n    if (tokens.length > 1) {\n      aliases.add(tokens.slice(0, -1).join(' '));\n    }\n    // Additional punctuation stripped (commas/quotes/periods)\n    const noPunct = base.replace(/[\",\\.]/g, '').replace(/\\s+/g, ' ').trim();\n    if (noPunct) aliases.add(noPunct);\n    return Array.from(aliases).filter(Boolean);\n  };\n\n  function aliasUIDFromMap(map, name) {\n    const norms = generateAliases(name).map(n => normalizeName(n));\n    const keys = [];\n    norms.forEach(n => {\n      keys.push(`client:${n}`);\n      keys.push(`caregiver:${n}`);\n    });\n    let found = [];\n    for (const k of keys) {\n      const uid = map[k];\n      if (uid) found.push(uid);\n    }\n    if (found.length === 0) return null;\n    const isM = (u) => typeof u === 'string' && /-MAST$/.test(u);\n    return found.find(isM) || found[0];\n  }\n\n  function applyAliasMappings(map, name, uid) {\n    const out = { ...map };\n    const aliases = generateAliases(name);\n    aliases.forEach(a => {\n      const n = normalizeName(a);\n      out[`client:${n}`] = uid;\n      out[`caregiver:${n}`] = uid;\n    });\n    return out;\n  }\n\n  // Utility: unique names (case/space insensitive) while preserving first occurrence\n  function uniqueByNormalized(list) {\n    const seen = new Set();\n    const out = [];\n    for (const n of list || []) {\n      const norm = normalizeName(n);\n      if (!seen.has(norm)) {\n        seen.add(norm);\n        out.push(n);\n      }\n    }\n    return out;\n  }\n\n  // Derive a display name from a normalized key by checking current source data; fallback to title-casing the normalized string\n  function displayNameForNormalized(norm) {\n    const searchLists = [\n      ...(entityType === 'client' ? [bucaNames, jovieNames] : [bucaCaregivers, jovieCaregivers])\n    ];\n    for (const lst of searchLists) {\n      const match = (lst || []).find(n => normalizeName(n) === norm);\n      if (match) return match;\n    }\n    // Title-case fallback\n    return norm.split(' ').filter(Boolean).map(s => s.charAt(0).toUpperCase() + s.slice(1)).join(' ');\n  }\n\n  // Show only names with temporary source IDs per pane\n  const isTempBuca = (uid) => typeof uid === 'string' && /-BUCA$/.test(uid);\n  const isTempJovie = (uid) => typeof uid === 'string' && /-JOVIE$/.test(uid);\n\n  // Build live-only name arrays from exchange channels instead of props\n  function extractNamesFromChannel(channel, type) {\n    const rows = channel?.rows || [];\n    if (type === 'client') {\n      return rows.map(r => r?.client).filter(Boolean);\n    } else {\n      const out = [];\n      rows.forEach(r => {\n        if (!r?.caregiver) return;\n        if (Array.isArray(r.caregiver)) {\n          r.caregiver.forEach(item => {\n            if (!item) return;\n            if (typeof item === 'string') { out.push(item); }\n            else if (typeof item === 'object' && item.name) { out.push(String(item.name)); }\n          });\n        } else if (typeof r.caregiver === 'object' && r.caregiver.name) {\n          out.push(String(r.caregiver.name));\n        } else {\n          String(r.caregiver || '').split(',').map(s => s.trim()).forEach(v => v && out.push(v));\n        }\n      });\n      return out;\n    }\n  }\n  const bucaFromChannels = extractNamesFromChannel(channels?.buca, entityType) || [];\n  const jovieFromChannels = extractNamesFromChannel(channels?.jovie, entityType) || [];\n  const bucaFromProps = entityType === 'client' ? (bucaNames || []) : (bucaCaregivers || []);\n  const jovieFromProps = entityType === 'client' ? (jovieNames || []) : (jovieCaregivers || []);\n  const allBucaNames = uniqueByNormalized((bucaFromChannels.length ? bucaFromChannels : bucaFromProps));\n  const allJovieNames = uniqueByNormalized((jovieFromChannels.length ? jovieFromChannels : jovieFromProps));\n  useEffect(() => {\n    console.debug('[UIDRegistry] Derived BUCA live names', {\n      entityType,\n      fromChannelsCount: bucaFromChannels.length,\n      fromPropsCount: bucaFromProps.length,\n      finalCount: allBucaNames.length,\n    });\n    console.debug('[UIDRegistry] Derived JOVIE live names', {\n      entityType,\n      fromChannelsCount: jovieFromChannels.length,\n      fromPropsCount: jovieFromProps.length,\n      finalCount: allJovieNames.length,\n    });\n    // no deps on arrays themselves to avoid noise; entityType is sufficient for visibility\n  }, [entityType]);\n\n  // NOTE: Side panes should reflect only LIVE data from BUCA/JOVIE (no registry fallback)\n\n  // Union: source-derived + registry-derived, de-duplicated by normalized name\n  function dedupeItems(items) {\n    const seen = new Set();\n    const out = [];\n    for (const it of items) {\n      const norm = normalizeName(it.name);\n      if (!seen.has(norm)) { seen.add(norm); out.push(it); }\n    }\n    return out;\n  }\n\n  const bucaTempList = dedupeItems([\n    ...allBucaNames\n      .map(name => ({ name, uid: nameMap[registryKey(name)] }))\n      .filter(it => isTempBuca(it.uid)),\n  ]).filter(it => it.name.toLowerCase().includes(searchBuca.toLowerCase()));\n\n  const jovieTempList = dedupeItems([\n    ...allJovieNames\n      .map(name => ({ name, uid: nameMap[registryKey(name)] }))\n      .filter(it => isTempJovie(it.uid)),\n  ]).filter(it => it.name.toLowerCase().includes(searchJovie.toLowerCase()));\n\n  // Assigned list: show ALL names/UIDs in the registry, regardless of current BUCA/JOVIE data\n  useEffect(() => {\n    // Build a map of UID -> all names (from nameMap) for the selected entityType\n    const uidToNames = {};\n    Object.entries(nameMap).forEach(([key, uid]) => {\n      if (!filterType(key)) return;\n      if (!uidToNames[uid]) uidToNames[uid] = new Set();\n      uidToNames[uid].add(key.split(':')[1]);\n    });\n    // Precompute original-cased lookups from live data (channels preferred) falling back to props\n    const jovieOriginals = (jovieFromChannels.length ? jovieFromChannels : jovieFromProps) || [];\n    const bucaOriginals = (bucaFromChannels.length ? bucaFromChannels : bucaFromProps) || [];\n\n    // For display, order names so that the canonical (prefer JOVIE, then BUCA) is first\n    const assigned = Object.entries(uidToNames).map(([uid, namesSet]) => {\n      const norms = Array.from(namesSet);\n      // Find first JOVIE original that matches any of the norms\n      const jovieCanon = jovieOriginals.find(orig => norms.includes(normalizeName(orig)));\n      // Else first BUCA original\n      const bucaCanon = bucaOriginals.find(orig => norms.includes(normalizeName(orig)));\n      const canonical = jovieCanon || bucaCanon || null;\n      // Build ordered unique display list: canonical (if any) followed by the rest title-cased where needed\n      const ordered = [];\n      if (canonical) ordered.push(canonical);\n      norms.forEach(n => {\n        const fromJovie = jovieOriginals.find(orig => normalizeName(orig) === n);\n        const fromBuca = bucaOriginals.find(orig => normalizeName(orig) === n);\n        const disp = fromJovie || fromBuca || displayNameForNormalized(n);\n        if (!ordered.some(x => normalizeName(x) === normalizeName(disp))) {\n          ordered.push(disp);\n        }\n      });\n      return { uid, names: ordered };\n    });\n    setAssignedList(assigned);\n  }, [nameMap, entityType]);\n\n  // --- Responsive/Card Layout Wrapper ---\n  // The rest of the code remains unchanged...\n  \n  // Remove mapping for a name (by UID)\n  function handleDeleteMapping(uid) {\n    setNameMap(prev => {\n      const newMap = { ...prev };\n      Object.keys(newMap).forEach(n => {\n        if (newMap[n] === uid) delete newMap[n];\n      });\n      // Persist immediately\n      window.saveNameIdMap && window.saveNameIdMap(newMap);\n      onNameMapChange && onNameMapChange(newMap);\n      return newMap;\n    });\n  }\n\n  // Save/export as JSON (and publish) — attempts backend sync first\n  async function handleSave() {\n    try {\n      // Try backend save\n      let synced = false;\n      try {\n        synced = await saveNameIdMap(nameMap);\n      } catch {}\n\n      // Always offer a local export as a backup\n      const blob = new Blob([JSON.stringify(nameMap, null, 2)], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'name_id_map.json';\n      a.click();\n\n      // publish updated map to exchange (uids)\n      try { exchange.publish('uids', { map: nameMap, savedAt: new Date().toISOString(), backend: synced }); } catch {}\n\n      setSaveMsg(synced ? 'Saved to backend and exported JSON' : 'Backend unavailable — saved locally and exported JSON');\n      setTimeout(() => setSaveMsg(\"\"), 2500);\n    } catch (e) {\n      setSaveMsg('Error saving');\n      setTimeout(() => setSaveMsg(\"\"), 2500);\n    }\n  }\n\n  // Admin: purge registry locally and backend (if available)\n  async function handlePurge() {\n    try {\n      await purgeNameIdMap();\n      const empty = {};\n      setNameMap(empty);\n      onNameMapChange && onNameMapChange(empty);\n      try { window.saveNameIdMap && window.saveNameIdMap(empty); } catch {}\n      try { exchange.publish('uids', { map: empty, purgedAt: new Date().toISOString() }); } catch {}\n      setSaveMsg(\"Registry purged\");\n      setTimeout(() => setSaveMsg(\"\"), 2000);\n    } catch (e) {\n      setSaveMsg(\"Error purging registry\");\n      setTimeout(() => setSaveMsg(\"\"), 2000);\n    }\n  }\n\n  // (Auto-load on mount; manual load removed)\n\n  // Assign or merge UID logic (fixed for entity type)\n  function handleAssignUID() {\n    const oldNorm = normalizeName(oldName);\n    const prefNorm = normalizeName(preferredName);\n    if (!oldNorm || !prefNorm) return;\n    const oldKey = registryKey(oldName);\n    const prefKey = registryKey(preferredName);\n    // If either name already has a UID, use/merge it (manual flow must end as MAST)\n    const existingUIDs = [nameMap[oldKey], nameMap[prefKey]].filter(Boolean);\n    const isMaster = (uid) => typeof uid === 'string' && /-MAST$/.test(uid);\n    let uid;\n    // Only consider UIDs for this entityType\n    const allUIDs = Object.entries(nameMap)\n      .filter(([k, v]) => filterType(k))\n      .map(([k, v]) => v);\n    if (existingUIDs.length > 0) {\n      // If any is already MAST, use that as the target\n      const mast = existingUIDs.find(isMaster);\n      if (mast) {\n        uid = mast;\n        setNameMap(prev => {\n          let newMap = { ...prev };\n          newMap[oldKey] = uid;\n          newMap[prefKey] = uid;\n          // Apply aliases for future resolution\n          newMap = applyAliasMappings(newMap, oldName, uid);\n          newMap = applyAliasMappings(newMap, preferredName, uid);\n          window.saveNameIdMap && window.saveNameIdMap(newMap);\n          onNameMapChange && onNameMapChange(newMap);\n          return newMap;\n        });\n      } else if (existingUIDs.length === 2 && existingUIDs[0] !== existingUIDs[1]) {\n        // Two different temp UIDs -> create a new MAST and remap both\n        const newMast = getNextUID(allUIDs, 'MAST');\n        setNameMap(prev => {\n          let newMap = { ...prev };\n          const [u1, u2] = existingUIDs;\n          Object.keys(newMap).forEach(k => {\n            if (filterType(k) && (newMap[k] === u1 || newMap[k] === u2)) newMap[k] = newMast;\n          });\n          newMap[oldKey] = newMast;\n          newMap[prefKey] = newMast;\n          newMap = applyAliasMappings(newMap, oldName, newMast);\n          newMap = applyAliasMappings(newMap, preferredName, newMast);\n          window.saveNameIdMap && window.saveNameIdMap(newMap);\n          onNameMapChange && onNameMapChange(newMap);\n          return newMap;\n        });\n      } else {\n        // Exactly one temp UID -> promote to MAST and assign both\n        const newMast = getNextUID(allUIDs, 'MAST');\n        const temp = existingUIDs[0];\n        setNameMap(prev => {\n          let newMap = { ...prev };\n          Object.keys(newMap).forEach(k => {\n            if (filterType(k) && newMap[k] === temp) newMap[k] = newMast;\n          });\n          newMap[oldKey] = newMast;\n          newMap[prefKey] = newMast;\n          newMap = applyAliasMappings(newMap, oldName, newMast);\n          newMap = applyAliasMappings(newMap, preferredName, newMast);\n          window.saveNameIdMap && window.saveNameIdMap(newMap);\n          onNameMapChange && onNameMapChange(newMap);\n          return newMap;\n        });\n      }\n    } else {\n      // Neither name has a UID yet -> create a new MAST UID\n      uid = getNextUID(allUIDs, 'MAST');\n      setNameMap(prev => {\n        let newMap = {\n          ...prev,\n          [oldKey]: uid,\n          [prefKey]: uid,\n        };\n        newMap = applyAliasMappings(newMap, oldName, uid);\n        newMap = applyAliasMappings(newMap, preferredName, uid);\n        window.saveNameIdMap && window.saveNameIdMap(newMap);\n        onNameMapChange && onNameMapChange(newMap);\n        return newMap;\n      });\n    }\n    setOldName(\"\");\n    setPreferredName(\"\");\n  }\n\n  // Process data from either BUCA or JOVIE\n  const processDataSource = (data, source) => {\n    if (!mapLoaded) {\n      // Defer processing until the persisted map is loaded to avoid clobbering assignments on remount\n      return false;\n    }\n    console.log(`Processing ${source} data:`, data);\n    \n    if (!data?.rows?.length) {\n      console.log(`No rows in ${source} data`);\n      return false;\n    }\n    \n    try {\n      // Extract names based on entity type and source\n      const names = [];\n      \n      if (source === 'buca') {\n        if (entityType === 'client') {\n          data.rows.forEach(row => row.client && names.push(row.client));\n        } else {\n          data.rows.forEach(row => {\n            if (!row.caregiver) return;\n            if (Array.isArray(row.caregiver)) {\n              row.caregiver.forEach(item => {\n                if (!item) return;\n                if (typeof item === 'string') names.push(item);\n                else if (typeof item === 'object' && item.name) names.push(String(item.name));\n              });\n            } else if (typeof row.caregiver === 'object' && row.caregiver.name) {\n              names.push(String(row.caregiver.name));\n            } else {\n              String(row.caregiver || '').split(',').map(s => s.trim()).forEach(v => v && names.push(v));\n            }\n          });\n        }\n      } else if (source === 'jovie') {\n        if (entityType === 'client') {\n          data.rows.forEach(row => row.client && names.push(row.client));\n        } else {\n          data.rows.forEach(row => {\n            if (!row.caregiver) return;\n            if (Array.isArray(row.caregiver)) {\n              row.caregiver.forEach(item => {\n                if (!item) return;\n                if (typeof item === 'string') names.push(item);\n                else if (typeof item === 'object' && item.name) names.push(String(item.name));\n              });\n            } else if (typeof row.caregiver === 'object' && row.caregiver.name) {\n              names.push(String(row.caregiver.name));\n            } else {\n              String(row.caregiver || '').split(',').map(s => s.trim()).forEach(v => v && names.push(v));\n            }\n          });\n        }\n      }\n\n      console.log(`Extracted ${names.length} ${entityType} names from ${source}:`, names);\n      \n      if (names.length === 0) {\n        console.log(`No valid ${entityType} names found in ${source} data`);\n        return false;\n      }\n\n      const updated = { ...nameMap };\n      let changed = false;\n\n      // Build a running set of existing UIDs for this entityType so we issue sequential IDs per batch\n      const usedUIDs = new Set(\n        Object.entries(updated)\n          .filter(([k]) => filterType(k))\n          .map(([, v]) => v)\n      );\n\n      // Helper flags\n      const isMaster = (uid) => typeof uid === 'string' && /-MAST$/.test(uid);\n      const otherSource = source === 'buca' ? 'jovie' : source === 'jovie' ? 'buca' : null;\n      // Build set of names present in the other source for this entityType (if available)\n      const otherData = otherSource ? useExchangeStore.getState().channels?.[otherSource] : null;\n      const otherNames = new Set(\n        (otherData?.rows || [])\n          .flatMap(row => {\n            if (entityType === 'client') return row.client ? [row.client] : [];\n            if (row.caregiver) return Array.isArray(row.caregiver) ? row.caregiver : String(row.caregiver || '').split(',').map(s => s.trim());\n            return [];\n          })\n          .map(n => normalizeName(n))\n      );\n\n      const srcCode = source === 'buca' ? 'BUCA' : source === 'jovie' ? 'JOVIE' : 'MAST';\n      const hasAnyMasterForType = Array.from(usedUIDs).some(u => isMaster(u));\n\n      names.forEach(name => {\n        const normName = normalizeName(name);\n        const key = `${entityType}:${normName}`;\n        const exists = updated[key];\n        // Check for any alias-based UID (prefer MAST) regardless of current exists value\n        const aliasUid = aliasUIDFromMap(updated, name);\n\n        // If already assigned to a MAST, do nothing\n        if (exists && isMaster(exists)) {\n          return;\n        }\n\n        // If alias exists and points to a UID (preferably MAST), adopt it\n        if (aliasUid) {\n          if (!exists || (!isMaster(exists) && exists !== aliasUid)) {\n            updated[key] = aliasUid;\n            changed = true;\n            return;\n          }\n        }\n\n        // Never change entries that already have a MAST UID\n        if (exists && isMaster(exists)) {\n          return;\n        }\n\n        // If it already exists and is temp (BUCA/JOVIE) but counterpart now exists in other source, promote/merge to MAST\n        if (exists && !isMaster(exists) && otherNames.has(normName)) {\n          const masterUid = getNextUID(usedUIDs, 'MAST');\n          // Remap all entries with this UID (and also check if opposite temp exists) to master\n          Object.keys(updated).forEach(k => {\n            if (filterType(k) && updated[k] === exists) updated[k] = masterUid;\n          });\n          updated[key] = masterUid;\n          usedUIDs.add(masterUid);\n          changed = true;\n          return;\n        }\n\n        // If not yet assigned\n        if (!exists) {\n          if (otherNames.has(normName)) {\n            // Both sources have the same name: assign MAST immediately\n            const masterUid = getNextUID(usedUIDs, 'MAST');\n            updated[key] = masterUid;\n            usedUIDs.add(masterUid);\n            changed = true;\n            console.log('Assigned MAST UID (both sources present):', { name, key, uid: masterUid });\n          } else {\n            // Only present in this source: assign a temporary source UID so it appears in the live pane\n            const tempUid = getNextUID(usedUIDs, srcCode);\n            updated[key] = tempUid;\n            usedUIDs.add(tempUid);\n            changed = true;\n            console.log('Assigned temporary UID:', { name, key, uid: tempUid });\n          }\n        }\n      });\n\n      if (changed) {\n        console.log('Updating name map with changes from', source);\n        setNameMap(updated);\n        onNameMapChange?.(updated);\n        window.saveNameIdMap?.(updated);\n        return true;\n      } else {\n        console.log('No changes to name map from', source);\n        return false;\n      }\n    } catch (error) {\n      console.error(`Error processing ${source} data:`, error);\n      return false;\n    }\n  };\n\n  // Subscribe to BUCA and JOVIE data from exchange store (Zustand subscribe API)\n  useEffect(() => {\n    console.log('Setting up exchange subscriptions for entityType:', entityType);\n\n    // Process any existing data already in the channels on mount/when entityType changes\n    try {\n      if (mapLoaded) {\n        const { channels } = useExchangeStore.getState();\n        if (channels?.buca) processDataSource(channels.buca, 'buca');\n        if (channels?.jovie) processDataSource(channels.jovie, 'jovie');\n      }\n    } catch (e) {\n      console.warn('Failed to process initial exchange channels:', e);\n    }\n\n    // Subscribe to store changes and react only when the specific channel changes\n    const unsubscribe = useExchangeStore.subscribe((state, prevState) => {\n      try {\n        if (!mapLoaded) return;\n        if (state.channels?.buca !== prevState.channels?.buca && state.channels?.buca) {\n          processDataSource(state.channels.buca, 'buca');\n        }\n        if (state.channels?.jovie !== prevState.channels?.jovie && state.channels?.jovie) {\n          processDataSource(state.channels.jovie, 'jovie');\n        }\n      } catch (e) {\n        console.warn('Error handling exchange update:', e);\n      }\n    });\n    return () => unsubscribe();\n  }, [entityType, mapLoaded]);\n\n  // Also reactively process live channel data when it changes (handles cases where rows update without channel object replacement)\n  useEffect(() => {\n    try {\n      if (channels?.buca) processDataSource(channels.buca, 'buca');\n    } catch (e) { /* no-op */ }\n  }, [channels?.buca, entityType]);\n\n  useEffect(() => {\n    try {\n      if (channels?.jovie) processDataSource(channels.jovie, 'jovie');\n    } catch (e) { /* no-op */ }\n  }, [channels?.jovie, entityType]);\n\n  return (\n    <div className=\"flex justify-center w-full min-h-[80vh] items-start\">\n      <div className=\"w-full max-w-3xl bg-white shadow-xl rounded-2xl p-8 mt-8 mb-8 border border-gray-200\">\n        <h2 className=\"text-2xl font-bold mb-6 text-center text-blue-800 tracking-tight\">UID Registry</h2>\n        {/* --- Entity Type Toggle --- */}\n        <div className=\"flex justify-center mb-6\">\n          <button className={`px-4 py-2 rounded-l ${entityType==='client' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`} onClick={()=>setEntityType('client')}>Clients</button>\n          <button className={`px-4 py-2 rounded-r ${entityType==='caregiver' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`} onClick={()=>setEntityType('caregiver')}>Caregivers</button>\n        </div>\n        {/* --- Main Grid --- */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-6\">\n          <div>\n            <label className=\"block text-xs font-semibold mb-1 text-gray-700\">BUCA Names</label>\n            <input\n              className=\"mb-1 w-full border px-1 text-xs rounded focus:ring-2 focus:ring-blue-200\"\n              placeholder=\"Search...\"\n              value={searchBuca}\n              onChange={e => setSearchBuca(e.target.value)}\n            />\n            <ul id=\"nameid-buca-list\" className=\"border rounded h-40 overflow-y-auto bg-gray-50 text-sm\">\n              {bucaTempList.map(({ name, uid }, i) => (\n                <li\n                  key={name + i}\n                  className={`px-2 py-1 cursor-pointer hover:bg-orange-100 ${oldName === name ? \"bg-orange-200\" : \"\"}`}\n                  onClick={() => setOldName(name)}\n                  title={name}\n                >\n                  <span className=\"truncate inline-block max-w-[75%] align-middle\" title={name}>{name}</span>\n                  {uid && <span className=\"text-gray-400 ml-2 text-xs align-middle\">[{uid}]</span>}\n                </li>\n              ))}\n            </ul>\n          </div>\n          <div>\n            <label className=\"block text-xs font-semibold mb-1 text-gray-700\">JOVIE Names</label>\n            <input\n              className=\"mb-1 w-full border px-1 text-xs rounded focus:ring-2 focus:ring-blue-200\"\n              placeholder=\"Search...\"\n              value={searchJovie}\n              onChange={e => setSearchJovie(e.target.value)}\n            />\n            <ul id=\"nameid-jovie-list\" className=\"border rounded h-40 overflow-y-auto bg-gray-50 text-sm\">\n              {jovieTempList.map(({ name, uid }, i) => (\n                <li\n                  key={name + i}\n                  className={`px-2 py-1 cursor-pointer hover:bg-green-100 ${preferredName === name ? \"bg-green-200\" : \"\"}`}\n                  onClick={() => setPreferredName(name)}\n                  title={name}\n                >\n                  <span className=\"truncate inline-block max-w-[75%] align-middle\" title={name}>{name}</span>\n                  {uid && <span className=\"text-gray-400 ml-2 text-xs align-middle\">[{uid}]</span>}\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n        {/* --- Assignment Row --- */}\n        <div className=\"flex flex-col md:flex-row gap-2 mb-4 items-center\">\n          <input\n            id=\"nameid-old-input\"\n            className=\"border px-2 py-1 text-xs rounded flex-1 min-w-[120px]\"\n            placeholder=\"Old Name (BUCA)\"\n            value={oldName}\n            onChange={e => setOldName(e.target.value)}\n          />\n          <span className=\"text-xl mx-2\">→</span>\n          <input\n            id=\"nameid-preferred-input\"\n            className=\"border px-2 py-1 text-xs rounded flex-1 min-w-[120px]\"\n            placeholder=\"Preferred Name (JOVIE)\"\n            value={preferredName}\n            onChange={e => setPreferredName(e.target.value)}\n          />\n          <button\n            id=\"nameid-assign-btn\"\n            className=\"ml-2 px-4 py-2 bg-blue-600 text-white rounded font-semibold hover:bg-blue-700 disabled:opacity-50\"\n            onClick={handleAssignUID}\n            disabled={!oldName || !preferredName}\n          >Assign ID</button>\n        </div>\n        <div id=\"nameid-preview-label\" className=\"mb-4 text-xs text-gray-700 text-center min-h-[1.5em]\">\n          {oldName && preferredName ? `${oldName} → ${preferredName}` : \"Select or enter names to assign an ID.\"}\n        </div>\n        {/* --- Assigned UIDs --- */}\n        <div className=\"mb-6\">\n          <label className=\"block text-xs font-semibold mb-2 text-gray-700\">Assigned Name IDs</label>\n          {/* Search within assigned list */}\n          <input\n            className=\"mb-2 w-full border px-1 text-xs rounded focus:ring-2 focus:ring-blue-200\"\n            placeholder=\"Search assigned… (name or UID)\"\n            value={searchAssigned}\n            onChange={e => setSearchAssigned(e.target.value)}\n          />\n          {(() => {\n            const q = (searchAssigned || '').toLowerCase();\n            const assignedFiltered = q\n              ? assignedList.filter(({ names, uid }) => {\n                  const text = `${(names || []).join(' ')} ${uid || ''}`.toLowerCase();\n                  return text.includes(q);\n                })\n              : assignedList;\n            const list = assignedFiltered;\n            return (\n              <ul id=\"nameid-id-list\" className=\"border rounded bg-gray-50 max-h-48 overflow-y-auto divide-y divide-gray-200\">\n                {list.length === 0 && <li className=\"text-gray-400 italic px-2 py-1\">No assignments yet</li>}\n                {list.map(({ uid, names }, idx) => (\n                  <li key={uid} className=\"flex items-center px-2 py-2\">\n                    <span className=\"flex-1 text-xs md:text-sm\">\n                      {names.join(\" | \")}\n                      {showIDs && <span className=\"text-gray-400 ml-2\">[{uid}]</span>}\n                    </span>\n                    <button\n                      id=\"nameid-delete-btn\"\n                      className=\"ml-2 text-red-500 hover:text-red-700 text-lg\"\n                      title=\"Delete all mappings for this ID\"\n                      onClick={() => handleDeleteMapping(uid)}\n                    >🗑️</button>\n                  </li>\n                ))}\n              </ul>\n            );\n          })()}\n        </div>\n        <div className=\"flex flex-col md:flex-row gap-2 mt-2 items-center\">\n          <button\n            id=\"nameid-save-btn\"\n            className=\"px-4 py-2 bg-green-600 text-white rounded font-semibold hover:bg-green-700 w-full md:w-auto\"\n            onClick={handleSave}\n          >Save Assignments</button>\n          <span\n            className={`text-xs px-2 py-1 rounded border w-full md:w-auto text-center ${backendOnline === null ? 'text-gray-500 border-gray-300' : backendOnline ? 'text-green-700 border-green-300 bg-green-50' : 'text-amber-700 border-amber-300 bg-amber-50'}`}\n            title={backendOnline ? 'Backend connected: UID map will persist on server.' : 'Backend unavailable: falling back to local storage (map may be lost if cache is cleared).'}\n          >\n            {backendOnline === null ? 'Checking backend…' : backendOnline ? 'Synced to backend' : 'Local-only (not synced)'}\n          </span>\n          {allowAdmin && (\n            <button\n              id=\"nameid-purge-btn\"\n              className=\"px-4 py-2 bg-red-600 text-white rounded font-semibold hover:bg-red-700 w-full md:w-auto\"\n              onClick={handlePurge}\n            >Purge Registry</button>\n          )}\n        </div>\n        {saveMsg && <div className=\"mt-2 text-green-700 text-xs text-center\">{saveMsg}</div>}\n        {allowAdmin && (\n          <div className=\"mt-6 text-xs text-gray-500 text-center\">\n            <b>Admin:</b> All assignments are local only. You can export/import as JSON.<br/>\n            <b>ID format:</b> UID-XXXX-SOURCE (MAST = both, BUCA, JOVIE).<br/>\n            <b>Tip:</b> Use the search boxes to quickly find names.\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n","import { create } from 'zustand';\n\n/**\n * Exchange Store\n * Acts as a central hub for data exchange between modules\n * Each module can publish data to specific channels and subscribe to data from other modules\n */\n\nexport const useExchangeStore = create((set, get) => ({\n  // Data channels\n  channels: {\n    buca: null,      // BUCA data\n    jovie: null,     // JOVIE data\n    uids: null,      // UID mappings\n    storage: null    // Persistent storage\n  },\n  \n  // Publish data to a channel\n  publish: (channel, data) => {\n    set(state => ({\n      channels: {\n        ...state.channels,\n        [channel]: {\n          ...state.channels[channel],\n          ...data,\n          timestamp: new Date().toISOString()\n        }\n      }\n    }));\n  },\n  \n  // Subscribe to data from a channel\n  subscribe: (channel, selector = state => state) => {\n    return (callback) => {\n      const listener = (state) => {\n        const data = state.channels[channel];\n        if (data) {\n          callback(selector(data), data);\n        }\n      };\n      \n      // Return unsubscribe function\n      return useExchangeStore.subscribe(listener, selector);\n    };\n  },\n  \n  // Clear a channel\n  clearChannel: (channel) => {\n    set(state => ({\n      channels: {\n        ...state.channels,\n        [channel]: null\n      }\n    }));\n  },\n  \n  // Get current data from a channel\n  getChannelData: (channel) => {\n    return get().channels[channel];\n  }\n}));\n\n// Initialize the store\nif (typeof window !== 'undefined') {\n  window.exchangeStore = useExchangeStore;\n}\n"],"names":["API_URL","process","LOCAL_KEY","QUEUE_KEY","async","isBackendAvailable","fetch","method","headers","ok","Error","e","saveNameIdMap","nameIdMap","syncQueuedChanges","body","JSON","stringify","window","localStorage","setItem","map","queue","parse","getItem","push","queueChange","length","removeItem","normalizeName","name","trim","replace","toLowerCase","getNextUID","existingIDs","source","arguments","undefined","max","forEach","id","match","Math","parseInt","String","padStart","NameIDRegistryPanel","_ref","bucaNames","jovieNames","bucaCaregivers","jovieCaregivers","initialNameMap","onNameMapChange","showIDs","allowAdmin","nameMap","setNameMap","useState","entityType","setEntityType","exchange","useExchangeStore","channels","state","useEffect","mounted","loaded","res","data","json","local","fetchNameIdMap","catch","publish","loadedAt","Date","toISOString","setMapLoaded","oldName","setOldName","preferredName","setPreferredName","assignedList","setAssignedList","searchAssigned","setSearchAssigned","searchBuca","setSearchBuca","searchJovie","setSearchJovie","saveMsg","setSaveMsg","mapLoaded","backendOnline","setBackendOnline","updatedAt","cancelled","check","setInterval","clearInterval","registryKey","filterType","k","startsWith","generateAliases","raw","s","base","aliases","Set","dePunct","add","m","nickname","unquoted","parts","split","filter","Boolean","lastName","tokens","slice","join","noPunct","Array","from","applyAliasMappings","uid","out","a","n","uniqueByNormalized","list","seen","norm","has","extractNamesFromChannel","channel","type","rows","r","client","caregiver","isArray","item","v","bucaFromChannels","buca","jovieFromChannels","jovie","bucaFromProps","jovieFromProps","allBucaNames","allJovieNames","dedupeItems","items","it","console","debug","fromChannelsCount","fromPropsCount","finalCount","bucaTempList","isTempBuca","test","includes","jovieTempList","isTempJovie","uidToNames","Object","entries","_ref2","key","jovieOriginals","bucaOriginals","assigned","_ref3","namesSet","norms","jovieCanon","find","orig","bucaCanon","canonical","ordered","fromJovie","fromBuca","disp","searchLists","lst","charAt","toUpperCase","displayNameForNormalized","some","x","names","processDataSource","_data$rows","log","_useExchangeStore$get","row","updated","changed","usedUIDs","_ref6","_ref7","isMaster","otherSource","otherData","getState","otherNames","flatMap","srcCode","u","_window$saveNameIdMap","_window","normName","exists","aliasUid","keys","found","aliasUIDFromMap","masterUid","tempUid","call","error","warn","unsubscribe","subscribe","prevState","_state$channels","_prevState$channels","_state$channels2","_state$channels3","_prevState$channels2","_state$channels4","_jsx","className","children","_jsxs","onClick","placeholder","value","onChange","target","_ref8","i","title","_ref9","oldNorm","prefNorm","oldKey","prefKey","existingUIDs","allUIDs","_ref4","_ref5","mast","prev","newMap","newMast","u1","u2","temp","disabled","q","_ref0","_ref1","idx","handleDeleteMapping","synced","blob","Blob","url","URL","createObjectURL","document","createElement","href","download","click","savedAt","backend","setTimeout","empty","purgeNameIdMap","purgedAt","create","set","get","uids","storage","timestamp","selector","callback","clearChannel","getChannelData","exchangeStore"],"sourceRoot":""}