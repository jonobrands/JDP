{"version":3,"file":"static/js/518.aed7a32b.chunk.js","mappings":"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","sources":["components/BCASPanel.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport CopyCell from '../CopyCell';\nimport useBcasStore from '../store/bcasStore';\n\n/**\n * BCASPanel - Displays BCAS (Business Case Analysis System) verification results with reconciliation and reporting options.\n * \n * @param {Object} props - Component props\n * @param {Array} props.rows - Array of BCAS verification rows to display\n * @param {Function} props.onRecon - Callback function when Recon Now is clicked\n * @param {Function} props.onReport - Callback function when Report is clicked\n * @returns {JSX.Element} The BCASPanel component\n */\nfunction BCASPanel({ rows = [], onRecon, onReport, onClear, onExport }) {\n  // Session-only edited results via Zustand: index -> parsed case number\n  const editedResults = useBcasStore(s => s.editedResults);\n  const setEditedResult = useBcasStore(s => s.setEditedResult);\n  const clearEditedResults = useBcasStore(s => s.clearEditedResults);\n  const setConfirmation = useBcasStore(s => s.setConfirmation);\n  const clearConfirmations = useBcasStore(s => s.clearConfirmations);\n  const [query, setQuery] = useState('');\n  const searchInputRef = useRef(null);\n  const feedbackTimerRef = useRef(null);\n  const [searchFeedback, setSearchFeedback] = useState(null); // 'nomatch' | null\n  const selectAllIn = (el) => {\n    try {\n      const range = document.createRange();\n      range.selectNodeContents(el);\n      const sel = window.getSelection();\n      sel.removeAllRanges();\n      sel.addRange(range);\n    } catch {}\n  };\n  // Helper: extract a case number from free-form Result text\n  const extractCaseNumber = (text) => {\n    if (typeof text !== 'string') return '';\n    // Look for explicit label first\n    const labeled = text.match(/BUC\\s*Case\\s*Number\\s*:\\s*([A-Z0-9-]+)/i);\n    if (labeled) return labeled[1].trim();\n    // Otherwise, find any token that looks like our case number pattern\n    const generic = text.match(/(?:^|\\s)((?:00[a-zA-Z0-9]|CAS)[-A-Z0-9]+)(?=\\b)/);\n    return generic ? generic[1].trim() : '';\n  };\n\n  const sanitizeCaseNumber = (val) => {\n    if (!val) return '';\n    if (typeof val !== 'string') return String(val);\n    return val.replace(/\\s*(?:Date:|ESTCaregiver:).*$/i, '').trim();\n  };\n\n  const getDisplayedCase = (row, idx) => {\n    const direct = sanitizeCaseNumber(row.caseNumber);\n    if (direct) return direct;\n    const edited = editedResults[idx];\n    if (edited) return edited;\n    return extractCaseNumber(row.result) || '';\n  };\n  // Clear handler: prefer onClear, fallback to legacy onRecon\n  const handleClear = () => {\n    try { clearEditedResults(); } catch {}\n    try { clearConfirmations(); } catch {}\n    if (typeof onClear === 'function') return onClear();\n    if (typeof onRecon === 'function') return onRecon();\n    console.warn('BCASPanel: no onClear/onRecon callback provided.');\n  };\n\n  // Export handler: prefer onExport, fallback to legacy onReport; then client-side export\n  const handleExport = async () => {\n    try {\n      if (typeof onExport === 'function') {\n        await onExport(rows);\n        return;\n      }\n      if (typeof onReport === 'function') {\n        await onReport(rows);\n        return;\n      }\n    } catch (err) {\n      console.error('Parent export callback failed, falling back to client export:', err);\n    }\n\n    // Build dynamic data: exclude date-like fields, normalize caregiver(s)\n    const dateKeys = new Set(['date','Date','service_date','SERVICE_DATE']);\n    const base = (rows || []).map((r, idx) => {\n      const out = {};\n      // Start with Client/Caregiver/Case_Number/Result if present (ordering first)\n      if (r.client != null) out.Client = r.client;\n      const cg = Array.isArray(r.caregivers) ? r.caregivers.join(', ') : r.caregiver;\n      if (cg != null) out.Caregiver = cg;\n      if (r.caseNumber != null) {\n        const sanitized = typeof r.caseNumber === 'string'\n          ? r.caseNumber.replace(/\\s*(?:Date:|ESTCaregiver:).*$/i, '').trim()\n          : r.caseNumber;\n        out.Case_Number = sanitized;\n      }\n      if (r.result != null) {\n        const parsed = (editedResults && editedResults[idx]) || extractCaseNumber(r.result);\n        // Prefer parsed case number in Result\n        out.Result = parsed || '';\n        // If Case_Number missing, fill from parsed\n        if (!out.Case_Number && parsed) out.Case_Number = parsed;\n      }\n      // Append remaining keys except date-like\n      Object.keys(r || {}).forEach((k) => {\n        if (dateKeys.has(k)) return;\n        if (k === 'client' || k === 'caregiver' || k === 'caregivers' || k === 'caseNumber' || k === 'result') return;\n        const v = r[k];\n        out[k] = Array.isArray(v) ? v.join(', ') : v;\n      });\n      return out;\n    });\n    const allKeys = Array.from(base.reduce((s, row) => {\n      Object.keys(row).forEach(k => s.add(k));\n      return s;\n    }, new Set()));\n    const data = base;\n\n    // Try styled export with xlsx-populate\n    try {\n      const xpMod = await import('xlsx-populate/browser/xlsx-populate');\n      const XlsxPopulate = xpMod && xpMod.default ? xpMod.default : xpMod;\n      const wb = await XlsxPopulate.fromBlankAsync();\n      const defaultSheet = wb.sheet('Sheet1');\n      if (defaultSheet) defaultSheet.name('BCAS');\n      const sheet = wb.sheet('BCAS');\n\n      const headers = allKeys.length ? allKeys : ['Client','Caregiver','Case_Number','Result'];\n      sheet.cell(1,1).value([headers]);\n      sheet.range(1,1,1,headers.length).style({ bold: true, fill: 'DDDDDD', horizontalAlignment: 'center' });\n      data.forEach((row, idx) => {\n        const r = idx + 2;\n        headers.forEach((h, c) => sheet.cell(r, c + 1).value(row[h] == null ? '' : row[h]));\n      });\n      const lastRow = (data.length || 0) + 1;\n      const lastCol = headers.length;\n      sheet.range(1,1,lastRow,lastCol).style('border','thin');\n      try { sheet.freezePanes(1,0); } catch {}\n      for (let i = 0; i < headers.length; i++) {\n        const h = headers[i];\n        let maxLen = String(h).length;\n        data.forEach(row => { const s = String(row[h] == null ? '' : row[h]); maxLen = Math.max(maxLen, s.length); });\n        sheet.column(i+1).width(Math.min(60, maxLen + 2));\n      }\n\n      const blob = await wb.outputAsync();\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'CaseConBCAS.xlsx';\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n      return;\n    } catch (err) {\n      // Fallback to SheetJS basic export\n      try {\n        const mod = await import('xlsx');\n        const XLSX = mod && mod.default ? mod.default : mod;\n        const wb = XLSX.utils.book_new();\n        const ws = XLSX.utils.json_to_sheet(data);\n        const keys = allKeys;\n        ws['!cols'] = keys.map(k => {\n          const headerLen = String(k).length;\n          const maxCellLen = data.reduce((m, r) => Math.max(m, String(r[k] == null ? '' : r[k]).length), 0);\n          return { wch: Math.min(60, Math.max(headerLen, maxCellLen) + 2) };\n        });\n        XLSX.utils.book_append_sheet(wb, ws, 'BCAS');\n        XLSX.writeFile(wb, 'CaseConBCAS.xlsx');\n      } catch (e) {\n        console.error('BCAS export failed', e);\n      }\n    }\n  };\n\n  // Compute filtered rows for display only\n  const displayRows = (rows || []).filter((row) => {\n    if (!query) return true;\n    const q = query.toLowerCase();\n    const client = String(row.client || '').toLowerCase();\n    const caregiver = String(row.caregiver || '').toLowerCase();\n    const sanitizedCase = typeof row.caseNumber === 'string'\n      ? row.caseNumber.replace(/\\s*(?:Date:|ESTCaregiver:).*$/i, '').trim()\n      : (row.caseNumber || '');\n    const caseLower = String(sanitizedCase).toLowerCase();\n    const orig = (rows || []).indexOf(row);\n    const parsed = (editedResults && editedResults[orig]) || extractCaseNumber(row.result) || '';\n    const parsedLower = parsed.toLowerCase();\n    return client.includes(q) || caregiver.includes(q) || caseLower.includes(q) || parsedLower.includes(q);\n  });\n\n  return (\n    <div>\n      <div className=\"flex items-center justify-between gap-4 mb-4\">\n        <div className=\"flex gap-3\">\n          <button \n            className=\"bg-gray-300 text-gray-800 px-6 py-2 rounded font-semibold hover:bg-gray-400\" \n            onClick={handleClear}\n          >\n            Clear Results\n          </button>\n          <button \n            className=\"bg-gray-300 text-gray-800 px-6 py-2 rounded font-semibold hover:bg-gray-400\" \n            onClick={handleExport}\n          >\n            Export\n          </button>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <input\n            ref={searchInputRef}\n            type=\"text\"\n            value={query}\n            onChange={(e) => { setQuery(e.target.value); if (searchFeedback) setSearchFeedback(null); }}\n            placeholder=\"Search client, caregiver, case #...\"\n            className={`border rounded px-3 py-2 text-sm w-64 focus:outline-none focus:ring-2 ${searchFeedback === 'nomatch' ? 'border-red-400 bg-red-50 focus:ring-red-400' : 'focus:ring-blue-400'}`}\n            onPaste={(e) => {\n              try {\n                e.preventDefault();\n                const text = (e.clipboardData || window.clipboardData).getData('text');\n                if (!text) return;\n                const parsed = extractCaseNumber(text);\n                if (!parsed) {\n                  // No case number found; give gentle feedback and keep query as-is\n                  if (feedbackTimerRef.current) clearTimeout(feedbackTimerRef.current);\n                  setSearchFeedback('nomatch');\n                  feedbackTimerRef.current = setTimeout(() => setSearchFeedback(null), 2000);\n                  return;\n                }\n                setQuery(parsed);\n                // Find matching row by displayed Case #\n                const targetIdx = (rows || []).findIndex((r, i) => sanitizeCaseNumber(getDisplayedCase(r, i)).toLowerCase() === parsed.toLowerCase());\n                if (targetIdx >= 0) {\n                  setEditedResult(targetIdx, parsed);\n                  // Record confirmation as matched for that row\n                  try {\n                    const displayed = sanitizeCaseNumber(getDisplayedCase(rows[targetIdx], targetIdx));\n                    const matched = displayed && parsed && displayed.toLowerCase() === parsed.toLowerCase();\n                    setConfirmation(targetIdx, { parsedCase: parsed, matched, timestamp: new Date().toISOString() });\n                  } catch {}\n                  // Clear and release focus after successful assignment\n                  setTimeout(() => {\n                    setQuery('');\n                    if (searchFeedback) setSearchFeedback(null);\n                    if (searchInputRef.current) searchInputRef.current.blur();\n                  }, 0);\n                } else {\n                  // No match feedback\n                  if (feedbackTimerRef.current) clearTimeout(feedbackTimerRef.current);\n                  setSearchFeedback('nomatch');\n                  feedbackTimerRef.current = setTimeout(() => setSearchFeedback(null), 2000);\n                }\n              } catch {}\n            }}\n          />\n          {searchFeedback === 'nomatch' ? (\n            <span className=\"text-xs text-red-600\">No matching case found</span>\n          ) : null}\n          {query ? (\n            <button\n              onClick={() => setQuery('')}\n              className=\"text-sm text-gray-600 hover:text-gray-800 underline\"\n              title=\"Clear search\"\n            >Clear</button>\n          ) : null}\n        </div>\n      </div>\n      <div className=\"overflow-x-auto border rounded bg-white mb-2 output-scroll\">\n        <table className=\"min-w-full text-sm\">\n          <thead className=\"bg-gray-200\">\n            <tr>\n              <th className=\"p-2 border font-bold\">Line #</th>\n              <th className=\"p-2 border font-bold\">Client</th>\n              <th className=\"p-2 border font-bold\">Caregiver</th>\n              <th className=\"p-2 border font-bold\">Case #</th>\n              <th className=\"p-2 border font-bold\">Result</th>\n            </tr>\n          </thead>\n          <tbody>\n            {displayRows.map((row, idx) => {\n              const originalIndex = (rows || []).indexOf(row);\n              return (\n              <tr key={idx}>\n                <CopyCell>{row.line || originalIndex + 1}</CopyCell>\n                <CopyCell>{row.client}</CopyCell>\n                <CopyCell>{row.caregiver}</CopyCell>\n                <CopyCell>{\n                  typeof row.caseNumber === 'string'\n                    ? row.caseNumber.replace(/\\s*(?:Date:|ESTCaregiver:).*$/i, '').trim()\n                    : (row.caseNumber || editedResults[originalIndex] || extractCaseNumber(row.result) || '')\n                }</CopyCell>\n                <td className=\"p-2\">\n                  <div\n                    role=\"textbox\"\n                    contentEditable\n                    suppressContentEditableWarning\n                    onPaste={(e) => {\n                      e.preventDefault();\n                      const text = (e.clipboardData || window.clipboardData).getData('text');\n                      if (!text) return;\n                      const parsed = extractCaseNumber(text);\n                      if (!parsed) return; // nothing to set\n                      if (e.currentTarget) e.currentTarget.textContent = parsed;\n                      setEditedResult(originalIndex, parsed);\n                      try {\n                        const displayed = sanitizeCaseNumber(getDisplayedCase(row, originalIndex));\n                        const matched = displayed && parsed && displayed.toLowerCase() === parsed.toLowerCase();\n                        setConfirmation(originalIndex, { parsedCase: parsed, matched, timestamp: new Date().toISOString() });\n                      } catch {}\n                    }}\n                    onKeyDown={async (e) => {\n                      try {\n                        const isPaste = (e.ctrlKey || e.metaKey) && (e.key === 'v' || e.key === 'V');\n                        if (!isPaste) return;\n                        e.preventDefault();\n                        if (navigator.clipboard && navigator.clipboard.readText) {\n                          const text = await navigator.clipboard.readText();\n                          if (!text) return;\n                          const parsed = extractCaseNumber(text);\n                          if (!parsed) return; // nothing to set\n                          if (e.currentTarget) e.currentTarget.textContent = parsed;\n                          setEditedResult(originalIndex, parsed);\n                          try {\n                            const displayed = sanitizeCaseNumber(getDisplayedCase(row, originalIndex));\n                            const matched = displayed && parsed && parsed.toLowerCase() === displayed.toLowerCase();\n                            setConfirmation(originalIndex, { parsedCase: parsed, matched, timestamp: new Date().toISOString() });\n                          } catch {}\n                        }\n                      } catch {}\n                    }}\n                    onFocus={(e) => selectAllIn(e.currentTarget)}\n                    onClick={(e) => selectAllIn(e.currentTarget)}\n                    className={`min-w-[160px] px-2 py-1 border rounded focus:outline-none focus:ring-2 ${(() => {\n                      const displayedRaw = getDisplayedCase(row, originalIndex);\n                      const currentRaw = (editedResults && editedResults[originalIndex]) || extractCaseNumber(row.result) || '';\n                      const displayed = displayedRaw.toLowerCase();\n                      const current = currentRaw.toLowerCase();\n                      const match = current && displayed && current === displayed;\n                      const mismatch = current && displayed && current !== displayed;\n                      if (match) return 'bg-green-50 border-green-400 focus:ring-green-300';\n                      if (mismatch) return 'bg-red-50 border-red-400 focus:ring-red-300';\n                      return 'focus:ring-orange-400';\n                    })()}`}\n                  >\n                    {(editedResults && editedResults[originalIndex]) || extractCaseNumber(row.result) || ''}\n                  </div>\n                  {(() => {\n                    const displayedRaw = getDisplayedCase(row, originalIndex);\n                    const currentRaw = (editedResults && editedResults[originalIndex]) || extractCaseNumber(row.result) || '';\n                    const displayed = displayedRaw.toLowerCase();\n                    const current = currentRaw.toLowerCase();\n                    const mismatch = current && displayed && current !== displayed;\n                    return mismatch ? (\n                      <div className=\"mt-1 text-xs font-semibold text-red-700\">Case number mismatch. Please rectify in JOVIE.</div>\n                    ) : null;\n                  })()}\n                </td>\n              </tr>\n            );})}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default BCASPanel;\n"],"names":["_ref","rows","onRecon","onReport","onClear","onExport","editedResults","useBcasStore","s","setEditedResult","clearEditedResults","setConfirmation","clearConfirmations","query","setQuery","useState","searchInputRef","useRef","feedbackTimerRef","searchFeedback","setSearchFeedback","selectAllIn","el","range","document","createRange","selectNodeContents","sel","window","getSelection","removeAllRanges","addRange","extractCaseNumber","text","labeled","match","trim","generic","sanitizeCaseNumber","val","String","replace","getDisplayedCase","row","idx","direct","caseNumber","edited","result","displayRows","filter","q","toLowerCase","client","caregiver","sanitizedCase","caseLower","orig","indexOf","parsedLower","includes","_jsxs","children","className","_jsx","onClick","handleClear","console","warn","async","err","error","dateKeys","Set","base","map","r","out","Client","cg","Array","isArray","caregivers","join","Caregiver","sanitized","Case_Number","parsed","Result","Object","keys","forEach","k","has","v","allKeys","from","reduce","add","data","xpMod","XlsxPopulate","default","wb","fromBlankAsync","defaultSheet","sheet","name","headers","length","cell","value","style","bold","fill","horizontalAlignment","h","c","lastRow","lastCol","freezePanes","i","maxLen","Math","max","column","width","min","blob","outputAsync","url","URL","createObjectURL","a","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","mod","XLSX","utils","book_new","ws","json_to_sheet","headerLen","maxCellLen","m","wch","book_append_sheet","writeFile","e","ref","type","onChange","target","placeholder","onPaste","preventDefault","clipboardData","getData","current","clearTimeout","setTimeout","targetIdx","findIndex","displayed","matched","parsedCase","timestamp","Date","toISOString","blur","title","originalIndex","CopyCell","line","role","contentEditable","suppressContentEditableWarning","currentTarget","textContent","onKeyDown","ctrlKey","metaKey","key","navigator","clipboard","readText","onFocus","displayedRaw","currentRaw"],"sourceRoot":""}